#!/usr/bin/env python
# -*- coding: utf-8 -*-


"""
A simple and easy blogging engine for use with Tempest template eninge for
building fast and easy static sites.

Run blogish -h for help
"""

import os
import sys
import json
import argparse
import re
import datetime
import markdown2

__MAJOR = 1
__MINOR = 0

__NAME   = "Blogish"
__VERSTR = "%s version %i.%i" % (__NAME, __MAJOR, __MINOR)
__COPYR = "Copyright Matthew P. Grosvenor (C) 2019"


################################################################################
# Messaging system with GCC like behaviour
################################################################################

def message(type, err_code, text):
    if type == "info":
        sys.stderr.write("Info: %s\n", text)
    elif type == "error" or (type == "warn" and "error" in args.warnings):
        if type == "warn" and ("no-" + err_code) in args.warnings:
            return
        sys.stderr.write("Error (%s): %s\nTerminating.\n" % (err_code, text))
        sys.exit(-1)
    elif type == "warn":
        if ("no-" + err_code) in args.warnings or "all" not in args.warnings:
            return
        sys.stderr.write("Warning (%s): %s\n" % (err_code,text))
    elif type == "debug":
        if args.verbose:
            sys.stderr.write("Debug: %s\n" % text)
    else:
        message("error", "internal", "Unknown print message type '%s'." % type)


################################################################################
# Blogging(ish) Engine
################################################################################
# Blogish sources markdown files from a directories supplied in "incl_dir"
# These markdown files have a "special" header enclosed in C++ style commets
# ( e.g  /* */) . The header contains the following colon seperated,
# line-delimited key/value feilds:
# - Title (of the blog post)
# - Date (the post was published)
# - Icon (a small image icon for the post )
# - Author (Name of the person who wrote the post)
# - Featured (featured image for social media puposes )
blogish_hdr_keys = ['Title', 'Date', 'Author', 'Icon', 'Featured', "Description", "Image"]

def get_sources(incl_dirs):
    result = []
    for incl_dir in incl_dirs:
        message("debug","", "Looking in directory '%s'" % incl_dir)
        for file in os.listdir(incl_dir):
            if file.endswith(".md"):
                src_file = os.path.join(incl_dir, file)
                message("debug","","Adding srouce file '%s'" % src_file)
                result.append(src_file)

    return result if result != [] else None


def load_file(f):
    message("debug", None, "  Opening %s..." % f)
    if not os.path.exists(f):
        message("error", "file-not-found", "File '%s' not found." % f)

    f = open(f,"r")
    result = f.read()
    f.close()
    return result


header_re = r'/\*([\s\S]*?)\*/\s*'
header_re = re.compile(header_re, flags=re.MULTILINE)

def get_headers(blog_str, blog_file):
    headers = header_re.findall(blog_str)
    if len(headers) == 0:
        message("error","no-header","Could not find header section in '%s'. Is this a valid blogish markdown file?" % blog_file)
    if len(headers) > 1:
        message("warn","multi-header","More than one header section found in '%s'" % blog_file)

    header_lines = headers[0].split('\n')
    header_lines = map(lambda x: x.strip(), header_lines)
    header_lines = filter(lambda x: x != '', header_lines)

    result = {}
    for header_line in header_lines:
        kvp = header_line.split(":")
        if len(kvp) < 2:
            message("warn","invalid-kvp","Invalid key value pair '%s' in header" % header_line)
            continue
        elif len(kvp) > 2:
            key = kvp[0]
            val = ":".join(kvp[1:])
        else:
            key = kvp[0].strip()
            val = kvp[1].strip()

        if key not in blogish_hdr_keys:
            message("warn", "invalid-key", "Invalid key '%s', expecting one of the following %s" % (key,blogish_hdr_keys))

        message("debug","","Adding key/value '%s' --> '%s'" % (key,val))
        result[key] = val

    return result

def rem_headers(blog_str):
    result = header_re.sub("",blog_str)
    return result

def make_html_outpath(out_dir, blog_file):
    base = os.path.basename(blog_file)
    new_name = base.replace(".md",".html")
    result = os.path.join(out_dir, new_name)
    message("debug","","Formed new output file path '%s'" % result)
    return result


def write_out(result, args_out):
    if args.out is None:
        out = sys.stdout
    else:
        message("debug", None, "Saving output...")
        message("debug", None, "  Writing to '%s'..." % args_out )
        out = open(args_out,"w")
    out.write(result.encode("utf-8"))
    out.close()
    return



def run_blogish(incl_dirs, out_dir):
    blog_files = get_sources(incl_dirs)
    if blog_files is None:
        message("error","no-source","No source files found in '%s'" % incl_dirs)

    headers_map = {}
    for blog_file in blog_files:
        message("debug","","Working on blog file '%s'" % blog_file)
        blog_str  = load_file(blog_file)
        hdr_map   = get_headers(blog_str,blog_file)
        blog_str  = rem_headers(blog_str)
        blog_html = markdown2.markdown(blog_str, extras=['fenced-code-blocks','cuddled-lists','header-ids','tables'])
        html_path = make_html_outpath(out_dir, blog_file)
        write_out(blog_html, html_path )
        headers_map[blog_file] = hdr_map

    #print headers_map







################################################################################
# Command Line Parsing
################################################################################

# Real fun starts here....
parser = argparse.ArgumentParser(description='A really ridiculously stupidly simple blogging engine for use with Tempest template engine.',
 epilog="example: blogish blog-content -o my-blog-site\n\n")

parser.add_argument(dest='incl_dirs', action='append',  default=[],
                    help='Direcotry to look in for source markdown files')
parser.add_argument('-W', dest='warnings', action='append', default=[],
                    help='Configure warnings. -Wall, -Werror')
parser.add_argument('-o', dest='out', action='store',
                    help='Output directory')
parser.add_argument('-v', "--version", dest='version', action='store_const', const=1,
                    help='Prints the current version number')
parser.add_argument('-V', "--verbose", dest='verbose', action='store_const', const=1,
                    help='Include more verbose output')


if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

for arg in sys.argv:
    if "-v" in arg[0:2] or "--version" in arg[0:9]:
        print(__VERSTR)
        print(__COPYR)
        sys.exit(0)

args = parser.parse_args()

run_blogish(args.incl_dirs,args.out)
